// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: external/insights.proto

package external

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DetailedInsights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifiers *Insights                   `protobuf:"bytes,1,opt,name=identifiers,proto3" json:"identifiers,omitempty"`
	Coverage    *IdentifierCoverageInsights `protobuf:"bytes,2,opt,name=coverage,proto3" json:"coverage,omitempty"`
	Traits      []*TraitInsightKey          `protobuf:"bytes,3,rep,name=traits,proto3" json:"traits,omitempty"`
}

func (x *DetailedInsights) Reset() {
	*x = DetailedInsights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_insights_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailedInsights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailedInsights) ProtoMessage() {}

func (x *DetailedInsights) ProtoReflect() protoreflect.Message {
	mi := &file_external_insights_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailedInsights.ProtoReflect.Descriptor instead.
func (*DetailedInsights) Descriptor() ([]byte, []int) {
	return file_external_insights_proto_rawDescGZIP(), []int{0}
}

func (x *DetailedInsights) GetIdentifiers() *Insights {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *DetailedInsights) GetCoverage() *IdentifierCoverageInsights {
	if x != nil {
		return x.Coverage
	}
	return nil
}

func (x *DetailedInsights) GetTraits() []*TraitInsightKey {
	if x != nil {
		return x.Traits
	}
	return nil
}

type InsightsHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latest computed insights ordered by computation date descendant
	Trend []*Insights `protobuf:"bytes,1,rep,name=trend,proto3" json:"trend,omitempty"`
}

func (x *InsightsHistory) Reset() {
	*x = InsightsHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_insights_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsightsHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsightsHistory) ProtoMessage() {}

func (x *InsightsHistory) ProtoReflect() protoreflect.Message {
	mi := &file_external_insights_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsightsHistory.ProtoReflect.Descriptor instead.
func (*InsightsHistory) Descriptor() ([]byte, []int) {
	return file_external_insights_proto_rawDescGZIP(), []int{1}
}

func (x *InsightsHistory) GetTrend() []*Insights {
	if x != nil {
		return x.Trend
	}
	return nil
}

type Insights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=computed_at,json=computedAt,proto3" json:"computed_at,omitempty"`
	// Number of connected components in the graph.
	Clusters     int64 `protobuf:"varint,2,opt,name=clusters,proto3" json:"clusters,omitempty"`
	Emails       int64 `protobuf:"varint,3,opt,name=emails,proto3" json:"emails,omitempty"`
	VisitorIds   int64 `protobuf:"varint,4,opt,name=visitor_ids,json=visitorIds,proto3" json:"visitor_ids,omitempty"`
	AppleIdfas   int64 `protobuf:"varint,5,opt,name=apple_idfas,json=appleIdfas,proto3" json:"apple_idfas,omitempty"`
	GoogleGaids  int64 `protobuf:"varint,6,opt,name=google_gaids,json=googleGaids,proto3" json:"google_gaids,omitempty"`
	CustomIds    int64 `protobuf:"varint,7,opt,name=custom_ids,json=customIds,proto3" json:"custom_ids,omitempty"`
	Ipv4S        int64 `protobuf:"varint,8,opt,name=ipv4s,proto3" json:"ipv4s,omitempty"`
	Ipv6S        int64 `protobuf:"varint,9,opt,name=ipv6s,proto3" json:"ipv6s,omitempty"`
	SamsungTifas int64 `protobuf:"varint,10,opt,name=samsung_tifas,json=samsungTifas,proto3" json:"samsung_tifas,omitempty"`
	RokuRidas    int64 `protobuf:"varint,11,opt,name=roku_ridas,json=rokuRidas,proto3" json:"roku_ridas,omitempty"`
	AmazonAfais  int64 `protobuf:"varint,12,opt,name=amazon_afais,json=amazonAfais,proto3" json:"amazon_afais,omitempty"`
	PhoneNumbers int64 `protobuf:"varint,13,opt,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"`
	CustomIds_1  int64 `protobuf:"varint,14,opt,name=custom_ids_1,json=customIds1,proto3" json:"custom_ids_1,omitempty"`
	CustomIds_2  int64 `protobuf:"varint,15,opt,name=custom_ids_2,json=customIds2,proto3" json:"custom_ids_2,omitempty"`
	CustomIds_3  int64 `protobuf:"varint,16,opt,name=custom_ids_3,json=customIds3,proto3" json:"custom_ids_3,omitempty"`
	CustomIds_4  int64 `protobuf:"varint,17,opt,name=custom_ids_4,json=customIds4,proto3" json:"custom_ids_4,omitempty"`
	CustomIds_5  int64 `protobuf:"varint,18,opt,name=custom_ids_5,json=customIds5,proto3" json:"custom_ids_5,omitempty"`
	CustomIds_6  int64 `protobuf:"varint,19,opt,name=custom_ids_6,json=customIds6,proto3" json:"custom_ids_6,omitempty"`
	CustomIds_7  int64 `protobuf:"varint,20,opt,name=custom_ids_7,json=customIds7,proto3" json:"custom_ids_7,omitempty"`
	CustomIds_8  int64 `protobuf:"varint,21,opt,name=custom_ids_8,json=customIds8,proto3" json:"custom_ids_8,omitempty"`
	CustomIds_9  int64 `protobuf:"varint,22,opt,name=custom_ids_9,json=customIds9,proto3" json:"custom_ids_9,omitempty"`
}

func (x *Insights) Reset() {
	*x = Insights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_insights_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Insights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Insights) ProtoMessage() {}

func (x *Insights) ProtoReflect() protoreflect.Message {
	mi := &file_external_insights_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Insights.ProtoReflect.Descriptor instead.
func (*Insights) Descriptor() ([]byte, []int) {
	return file_external_insights_proto_rawDescGZIP(), []int{2}
}

func (x *Insights) GetComputedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ComputedAt
	}
	return nil
}

func (x *Insights) GetClusters() int64 {
	if x != nil {
		return x.Clusters
	}
	return 0
}

func (x *Insights) GetEmails() int64 {
	if x != nil {
		return x.Emails
	}
	return 0
}

func (x *Insights) GetVisitorIds() int64 {
	if x != nil {
		return x.VisitorIds
	}
	return 0
}

func (x *Insights) GetAppleIdfas() int64 {
	if x != nil {
		return x.AppleIdfas
	}
	return 0
}

func (x *Insights) GetGoogleGaids() int64 {
	if x != nil {
		return x.GoogleGaids
	}
	return 0
}

func (x *Insights) GetCustomIds() int64 {
	if x != nil {
		return x.CustomIds
	}
	return 0
}

func (x *Insights) GetIpv4S() int64 {
	if x != nil {
		return x.Ipv4S
	}
	return 0
}

func (x *Insights) GetIpv6S() int64 {
	if x != nil {
		return x.Ipv6S
	}
	return 0
}

func (x *Insights) GetSamsungTifas() int64 {
	if x != nil {
		return x.SamsungTifas
	}
	return 0
}

func (x *Insights) GetRokuRidas() int64 {
	if x != nil {
		return x.RokuRidas
	}
	return 0
}

func (x *Insights) GetAmazonAfais() int64 {
	if x != nil {
		return x.AmazonAfais
	}
	return 0
}

func (x *Insights) GetPhoneNumbers() int64 {
	if x != nil {
		return x.PhoneNumbers
	}
	return 0
}

func (x *Insights) GetCustomIds_1() int64 {
	if x != nil {
		return x.CustomIds_1
	}
	return 0
}

func (x *Insights) GetCustomIds_2() int64 {
	if x != nil {
		return x.CustomIds_2
	}
	return 0
}

func (x *Insights) GetCustomIds_3() int64 {
	if x != nil {
		return x.CustomIds_3
	}
	return 0
}

func (x *Insights) GetCustomIds_4() int64 {
	if x != nil {
		return x.CustomIds_4
	}
	return 0
}

func (x *Insights) GetCustomIds_5() int64 {
	if x != nil {
		return x.CustomIds_5
	}
	return 0
}

func (x *Insights) GetCustomIds_6() int64 {
	if x != nil {
		return x.CustomIds_6
	}
	return 0
}

func (x *Insights) GetCustomIds_7() int64 {
	if x != nil {
		return x.CustomIds_7
	}
	return 0
}

func (x *Insights) GetCustomIds_8() int64 {
	if x != nil {
		return x.CustomIds_8
	}
	return 0
}

func (x *Insights) GetCustomIds_9() int64 {
	if x != nil {
		return x.CustomIds_9
	}
	return 0
}

type TraitInsightKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Values           []*TraitInsightValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	LongTailCount    int64                `protobuf:"varint,3,opt,name=long_tail_count,json=longTailCount,proto3" json:"long_tail_count,omitempty"`
	LongTailCoverage float32              `protobuf:"fixed32,6,opt,name=long_tail_coverage,json=longTailCoverage,proto3" json:"long_tail_coverage,omitempty"`
	TotalCount       int64                `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Coverage         float32              `protobuf:"fixed32,5,opt,name=coverage,proto3" json:"coverage,omitempty"`
}

func (x *TraitInsightKey) Reset() {
	*x = TraitInsightKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_insights_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraitInsightKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraitInsightKey) ProtoMessage() {}

func (x *TraitInsightKey) ProtoReflect() protoreflect.Message {
	mi := &file_external_insights_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraitInsightKey.ProtoReflect.Descriptor instead.
func (*TraitInsightKey) Descriptor() ([]byte, []int) {
	return file_external_insights_proto_rawDescGZIP(), []int{3}
}

func (x *TraitInsightKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TraitInsightKey) GetValues() []*TraitInsightValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *TraitInsightKey) GetLongTailCount() int64 {
	if x != nil {
		return x.LongTailCount
	}
	return 0
}

func (x *TraitInsightKey) GetLongTailCoverage() float32 {
	if x != nil {
		return x.LongTailCoverage
	}
	return 0
}

func (x *TraitInsightKey) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *TraitInsightKey) GetCoverage() float32 {
	if x != nil {
		return x.Coverage
	}
	return 0
}

type TraitInsightValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Count    int64   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Coverage float32 `protobuf:"fixed32,3,opt,name=coverage,proto3" json:"coverage,omitempty"`
}

func (x *TraitInsightValue) Reset() {
	*x = TraitInsightValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_insights_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraitInsightValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraitInsightValue) ProtoMessage() {}

func (x *TraitInsightValue) ProtoReflect() protoreflect.Message {
	mi := &file_external_insights_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraitInsightValue.ProtoReflect.Descriptor instead.
func (*TraitInsightValue) Descriptor() ([]byte, []int) {
	return file_external_insights_proto_rawDescGZIP(), []int{4}
}

func (x *TraitInsightValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TraitInsightValue) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TraitInsightValue) GetCoverage() float32 {
	if x != nil {
		return x.Coverage
	}
	return 0
}

type ListTraitInsightFactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters *TraitInsightFactFilters `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	Id      int32                    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Sorts   []*SortField             `protobuf:"bytes,3,rep,name=sorts,proto3" json:"sorts,omitempty"` // Sorts is an array to be consistent with the rest of the services even though there is currently only one type of sort for this request
	Search  string                   `protobuf:"bytes,4,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *ListTraitInsightFactsReq) Reset() {
	*x = ListTraitInsightFactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_insights_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTraitInsightFactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTraitInsightFactsReq) ProtoMessage() {}

func (x *ListTraitInsightFactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_insights_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTraitInsightFactsReq.ProtoReflect.Descriptor instead.
func (*ListTraitInsightFactsReq) Descriptor() ([]byte, []int) {
	return file_external_insights_proto_rawDescGZIP(), []int{5}
}

func (x *ListTraitInsightFactsReq) GetFilters() *TraitInsightFactFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListTraitInsightFactsReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListTraitInsightFactsReq) GetSorts() []*SortField {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *ListTraitInsightFactsReq) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type ListUniverseTraitInsightFactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters *TraitInsightFactFilters `protobuf:"bytes,1,opt,name=filters,proto3" json:"filters,omitempty"`
	Sorts   []*SortField             `protobuf:"bytes,2,rep,name=sorts,proto3" json:"sorts,omitempty"`
	Search  string                   `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *ListUniverseTraitInsightFactsReq) Reset() {
	*x = ListUniverseTraitInsightFactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_insights_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUniverseTraitInsightFactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniverseTraitInsightFactsReq) ProtoMessage() {}

func (x *ListUniverseTraitInsightFactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_insights_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniverseTraitInsightFactsReq.ProtoReflect.Descriptor instead.
func (*ListUniverseTraitInsightFactsReq) Descriptor() ([]byte, []int) {
	return file_external_insights_proto_rawDescGZIP(), []int{6}
}

func (x *ListUniverseTraitInsightFactsReq) GetFilters() *TraitInsightFactFilters {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ListUniverseTraitInsightFactsReq) GetSorts() []*SortField {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *ListUniverseTraitInsightFactsReq) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type ListTraitInsightFactsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TraitInsightKey `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListTraitInsightFactsRes) Reset() {
	*x = ListTraitInsightFactsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_insights_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTraitInsightFactsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTraitInsightFactsRes) ProtoMessage() {}

func (x *ListTraitInsightFactsRes) ProtoReflect() protoreflect.Message {
	mi := &file_external_insights_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTraitInsightFactsRes.ProtoReflect.Descriptor instead.
func (*ListTraitInsightFactsRes) Descriptor() ([]byte, []int) {
	return file_external_insights_proto_rawDescGZIP(), []int{7}
}

func (x *ListTraitInsightFactsRes) GetData() []*TraitInsightKey {
	if x != nil {
		return x.Data
	}
	return nil
}

type TraitInsightFactFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *TraitInsightFactFilters) Reset() {
	*x = TraitInsightFactFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_insights_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraitInsightFactFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraitInsightFactFilters) ProtoMessage() {}

func (x *TraitInsightFactFilters) ProtoReflect() protoreflect.Message {
	mi := &file_external_insights_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraitInsightFactFilters.ProtoReflect.Descriptor instead.
func (*TraitInsightFactFilters) Descriptor() ([]byte, []int) {
	return file_external_insights_proto_rawDescGZIP(), []int{8}
}

func (x *TraitInsightFactFilters) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

// Contains number of clusters, and the ratio of clusters that contains at least
// one of each of the identifier kinds
type IdentifierCoverageInsights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=computed_at,json=computedAt,proto3" json:"computed_at,omitempty"`
	Id         int32                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Number of connected components in the graph.
	Clusters int64 `protobuf:"varint,3,opt,name=clusters,proto3" json:"clusters,omitempty"`
	// The ratio is between 0 and 1, expressed as 0.5 for 50%
	ClustersHavingEmailsRatio       float64 `protobuf:"fixed64,4,opt,name=clusters_having_emails_ratio,json=clustersHavingEmailsRatio,proto3" json:"clusters_having_emails_ratio,omitempty"`
	ClustersHavingVisitorIdsRatio   float64 `protobuf:"fixed64,5,opt,name=clusters_having_visitor_ids_ratio,json=clustersHavingVisitorIdsRatio,proto3" json:"clusters_having_visitor_ids_ratio,omitempty"`
	ClustersHavingAppleIdfasRatio   float64 `protobuf:"fixed64,6,opt,name=clusters_having_apple_idfas_ratio,json=clustersHavingAppleIdfasRatio,proto3" json:"clusters_having_apple_idfas_ratio,omitempty"`
	ClustersHavingGoogleGaidsRatio  float64 `protobuf:"fixed64,7,opt,name=clusters_having_google_gaids_ratio,json=clustersHavingGoogleGaidsRatio,proto3" json:"clusters_having_google_gaids_ratio,omitempty"`
	ClustersHavingCustomIdsRatio    float64 `protobuf:"fixed64,8,opt,name=clusters_having_custom_ids_ratio,json=clustersHavingCustomIdsRatio,proto3" json:"clusters_having_custom_ids_ratio,omitempty"`
	ClustersHavingIpv4SRatio        float64 `protobuf:"fixed64,9,opt,name=clusters_having_ipv4s_ratio,json=clustersHavingIpv4sRatio,proto3" json:"clusters_having_ipv4s_ratio,omitempty"`
	ClustersHavingIpv6SRatio        float64 `protobuf:"fixed64,10,opt,name=clusters_having_ipv6s_ratio,json=clustersHavingIpv6sRatio,proto3" json:"clusters_having_ipv6s_ratio,omitempty"`
	ClustersHavingSamsungTifasRatio float64 `protobuf:"fixed64,11,opt,name=clusters_having_samsung_tifas_ratio,json=clustersHavingSamsungTifasRatio,proto3" json:"clusters_having_samsung_tifas_ratio,omitempty"`
	ClustersHavingRokuRidasRatio    float64 `protobuf:"fixed64,12,opt,name=clusters_having_roku_ridas_ratio,json=clustersHavingRokuRidasRatio,proto3" json:"clusters_having_roku_ridas_ratio,omitempty"`
	ClustersHavingAmazonAfaisRatio  float64 `protobuf:"fixed64,13,opt,name=clusters_having_amazon_afais_ratio,json=clustersHavingAmazonAfaisRatio,proto3" json:"clusters_having_amazon_afais_ratio,omitempty"`
	ClustersHavingPhoneNumbersRatio float64 `protobuf:"fixed64,14,opt,name=clusters_having_phone_numbers_ratio,json=clustersHavingPhoneNumbersRatio,proto3" json:"clusters_having_phone_numbers_ratio,omitempty"`
	ClustersHavingCustomIds_1Ratio  float64 `protobuf:"fixed64,15,opt,name=clusters_having_custom_ids_1_ratio,json=clustersHavingCustomIds1Ratio,proto3" json:"clusters_having_custom_ids_1_ratio,omitempty"`
	ClustersHavingCustomIds_2Ratio  float64 `protobuf:"fixed64,16,opt,name=clusters_having_custom_ids_2_ratio,json=clustersHavingCustomIds2Ratio,proto3" json:"clusters_having_custom_ids_2_ratio,omitempty"`
	ClustersHavingCustomIds_3Ratio  float64 `protobuf:"fixed64,17,opt,name=clusters_having_custom_ids_3_ratio,json=clustersHavingCustomIds3Ratio,proto3" json:"clusters_having_custom_ids_3_ratio,omitempty"`
	ClustersHavingCustomIds_4Ratio  float64 `protobuf:"fixed64,18,opt,name=clusters_having_custom_ids_4_ratio,json=clustersHavingCustomIds4Ratio,proto3" json:"clusters_having_custom_ids_4_ratio,omitempty"`
	ClustersHavingCustomIds_5Ratio  float64 `protobuf:"fixed64,19,opt,name=clusters_having_custom_ids_5_ratio,json=clustersHavingCustomIds5Ratio,proto3" json:"clusters_having_custom_ids_5_ratio,omitempty"`
	ClustersHavingCustomIds_6Ratio  float64 `protobuf:"fixed64,20,opt,name=clusters_having_custom_ids_6_ratio,json=clustersHavingCustomIds6Ratio,proto3" json:"clusters_having_custom_ids_6_ratio,omitempty"`
	ClustersHavingCustomIds_7Ratio  float64 `protobuf:"fixed64,21,opt,name=clusters_having_custom_ids_7_ratio,json=clustersHavingCustomIds7Ratio,proto3" json:"clusters_having_custom_ids_7_ratio,omitempty"`
	ClustersHavingCustomIds_8Ratio  float64 `protobuf:"fixed64,22,opt,name=clusters_having_custom_ids_8_ratio,json=clustersHavingCustomIds8Ratio,proto3" json:"clusters_having_custom_ids_8_ratio,omitempty"`
	ClustersHavingCustomIds_9Ratio  float64 `protobuf:"fixed64,23,opt,name=clusters_having_custom_ids_9_ratio,json=clustersHavingCustomIds9Ratio,proto3" json:"clusters_having_custom_ids_9_ratio,omitempty"`
}

func (x *IdentifierCoverageInsights) Reset() {
	*x = IdentifierCoverageInsights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_insights_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierCoverageInsights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierCoverageInsights) ProtoMessage() {}

func (x *IdentifierCoverageInsights) ProtoReflect() protoreflect.Message {
	mi := &file_external_insights_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierCoverageInsights.ProtoReflect.Descriptor instead.
func (*IdentifierCoverageInsights) Descriptor() ([]byte, []int) {
	return file_external_insights_proto_rawDescGZIP(), []int{9}
}

func (x *IdentifierCoverageInsights) GetComputedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ComputedAt
	}
	return nil
}

func (x *IdentifierCoverageInsights) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClusters() int64 {
	if x != nil {
		return x.Clusters
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingEmailsRatio() float64 {
	if x != nil {
		return x.ClustersHavingEmailsRatio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingVisitorIdsRatio() float64 {
	if x != nil {
		return x.ClustersHavingVisitorIdsRatio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingAppleIdfasRatio() float64 {
	if x != nil {
		return x.ClustersHavingAppleIdfasRatio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingGoogleGaidsRatio() float64 {
	if x != nil {
		return x.ClustersHavingGoogleGaidsRatio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingCustomIdsRatio() float64 {
	if x != nil {
		return x.ClustersHavingCustomIdsRatio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingIpv4SRatio() float64 {
	if x != nil {
		return x.ClustersHavingIpv4SRatio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingIpv6SRatio() float64 {
	if x != nil {
		return x.ClustersHavingIpv6SRatio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingSamsungTifasRatio() float64 {
	if x != nil {
		return x.ClustersHavingSamsungTifasRatio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingRokuRidasRatio() float64 {
	if x != nil {
		return x.ClustersHavingRokuRidasRatio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingAmazonAfaisRatio() float64 {
	if x != nil {
		return x.ClustersHavingAmazonAfaisRatio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingPhoneNumbersRatio() float64 {
	if x != nil {
		return x.ClustersHavingPhoneNumbersRatio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingCustomIds_1Ratio() float64 {
	if x != nil {
		return x.ClustersHavingCustomIds_1Ratio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingCustomIds_2Ratio() float64 {
	if x != nil {
		return x.ClustersHavingCustomIds_2Ratio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingCustomIds_3Ratio() float64 {
	if x != nil {
		return x.ClustersHavingCustomIds_3Ratio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingCustomIds_4Ratio() float64 {
	if x != nil {
		return x.ClustersHavingCustomIds_4Ratio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingCustomIds_5Ratio() float64 {
	if x != nil {
		return x.ClustersHavingCustomIds_5Ratio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingCustomIds_6Ratio() float64 {
	if x != nil {
		return x.ClustersHavingCustomIds_6Ratio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingCustomIds_7Ratio() float64 {
	if x != nil {
		return x.ClustersHavingCustomIds_7Ratio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingCustomIds_8Ratio() float64 {
	if x != nil {
		return x.ClustersHavingCustomIds_8Ratio
	}
	return 0
}

func (x *IdentifierCoverageInsights) GetClustersHavingCustomIds_9Ratio() float64 {
	if x != nil {
		return x.ClustersHavingCustomIds_9Ratio
	}
	return 0
}

type GetIdentifierCoverageInsightFactsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetIdentifierCoverageInsightFactsReq) Reset() {
	*x = GetIdentifierCoverageInsightFactsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_insights_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdentifierCoverageInsightFactsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentifierCoverageInsightFactsReq) ProtoMessage() {}

func (x *GetIdentifierCoverageInsightFactsReq) ProtoReflect() protoreflect.Message {
	mi := &file_external_insights_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentifierCoverageInsightFactsReq.ProtoReflect.Descriptor instead.
func (*GetIdentifierCoverageInsightFactsReq) Descriptor() ([]byte, []int) {
	return file_external_insights_proto_rawDescGZIP(), []int{10}
}

func (x *GetIdentifierCoverageInsightFactsReq) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetIdentifierCoverageInsightFactsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Insights *IdentifierCoverageInsights `protobuf:"bytes,1,opt,name=insights,proto3" json:"insights,omitempty"`
}

func (x *GetIdentifierCoverageInsightFactsRes) Reset() {
	*x = GetIdentifierCoverageInsightFactsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_insights_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIdentifierCoverageInsightFactsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdentifierCoverageInsightFactsRes) ProtoMessage() {}

func (x *GetIdentifierCoverageInsightFactsRes) ProtoReflect() protoreflect.Message {
	mi := &file_external_insights_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdentifierCoverageInsightFactsRes.ProtoReflect.Descriptor instead.
func (*GetIdentifierCoverageInsightFactsRes) Descriptor() ([]byte, []int) {
	return file_external_insights_proto_rawDescGZIP(), []int{11}
}

func (x *GetIdentifierCoverageInsightFactsRes) GetInsights() *IdentifierCoverageInsights {
	if x != nil {
		return x.Insights
	}
	return nil
}

type GetUniverseInsightFactsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Insights *Insights `protobuf:"bytes,1,opt,name=insights,proto3" json:"insights,omitempty"`
}

func (x *GetUniverseInsightFactsRes) Reset() {
	*x = GetUniverseInsightFactsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_external_insights_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUniverseInsightFactsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUniverseInsightFactsRes) ProtoMessage() {}

func (x *GetUniverseInsightFactsRes) ProtoReflect() protoreflect.Message {
	mi := &file_external_insights_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUniverseInsightFactsRes.ProtoReflect.Descriptor instead.
func (*GetUniverseInsightFactsRes) Descriptor() ([]byte, []int) {
	return file_external_insights_proto_rawDescGZIP(), []int{12}
}

func (x *GetUniverseInsightFactsRes) GetInsights() *Insights {
	if x != nil {
		return x.Insights
	}
	return nil
}

var File_external_insights_proto protoreflect.FileDescriptor

var file_external_insights_proto_rawDesc = []byte{
	0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x1a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x10,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x12, 0x34, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x08,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x06, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x0f, 0x49,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x28,
	0x0a, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x52, 0x05, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x22, 0xe9, 0x05, 0x0a, 0x08, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x66, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x6c, 0x65, 0x49, 0x64, 0x66, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5f, 0x67, 0x61, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x47, 0x61, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x70,
	0x76, 0x34, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x70, 0x76, 0x34, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x70, 0x76, 0x36, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x69, 0x70, 0x76, 0x36, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x73, 0x75, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x66, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x54, 0x69, 0x66, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x6f, 0x6b, 0x75, 0x5f, 0x72, 0x69, 0x64, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x72, 0x6f, 0x6b, 0x75, 0x52, 0x69, 0x64, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6d,
	0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x61, 0x69, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x41, 0x66, 0x61, 0x69, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73,
	0x5f, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x49, 0x64, 0x73, 0x31, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x73, 0x5f, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x49, 0x64, 0x73, 0x32, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x73, 0x5f, 0x33, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x33, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x34, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x34, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x35, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x35, 0x12, 0x20, 0x0a, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x36, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x36, 0x12, 0x20,
	0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x37, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x37,
	0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x38,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64,
	0x73, 0x38, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73,
	0x5f, 0x39, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x49, 0x64, 0x73, 0x39, 0x22, 0xed, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x69, 0x74, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x6f, 0x6e, 0x67,
	0x54, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x6e,
	0x67, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x61, 0x69, 0x6c, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x22, 0x59, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x22,
	0xaa, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x46, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x3b, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x46, 0x61, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x73,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0xa2, 0x01, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61,
	0x69, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x46, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x3b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x46, 0x61, 0x63, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29,
	0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x22, 0x49, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x69, 0x74, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x46, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x17,
	0x54, 0x72, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x46, 0x61, 0x63, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xbf, 0x0c, 0x0a, 0x1a,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x48, 0x0a, 0x21, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x48,
	0x0a, 0x21, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x66, 0x61, 0x73, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x6c, 0x65, 0x49, 0x64,
	0x66, 0x61, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x4a, 0x0a, 0x22, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5f, 0x67, 0x61, 0x69, 0x64, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x47, 0x61, 0x69, 0x64, 0x73, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x46, 0x0a, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3d, 0x0a, 0x1b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x49, 0x70, 0x76, 0x34, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x3d, 0x0a, 0x1b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x18, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67,
	0x49, 0x70, 0x76, 0x36, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x4c, 0x0a, 0x23, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x61,
	0x6d, 0x73, 0x75, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x66, 0x61, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x54, 0x69,
	0x66, 0x61, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x46, 0x0a, 0x20, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6b, 0x75,
	0x5f, 0x72, 0x69, 0x64, 0x61, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x6b, 0x75, 0x52, 0x69, 0x64, 0x61, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x4a, 0x0a, 0x22, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x61, 0x69, 0x73,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x61, 0x7a,
	0x6f, 0x6e, 0x41, 0x66, 0x61, 0x69, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x4c, 0x0a, 0x23,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49, 0x0a, 0x22, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x31, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x31,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49, 0x0a, 0x22, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x73, 0x5f, 0x32, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x32, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x49, 0x0a, 0x22, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x33,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x49, 0x64, 0x73, 0x33, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49, 0x0a, 0x22, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x34, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73,
	0x34, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49, 0x0a, 0x22, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x73, 0x5f, 0x35, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69,
	0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x35, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x49, 0x0a, 0x22, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x5f,
	0x36, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x36, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49, 0x0a, 0x22,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x37, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64,
	0x73, 0x37, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x49, 0x0a, 0x22, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x5f, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x38, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x38, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x49, 0x0a, 0x22, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x68,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x73,
	0x5f, 0x39, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x73, 0x39, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x36, 0x0a,
	0x24, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x46, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22,
	0x4c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x46, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x42, 0x26, 0x5a,
	0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_external_insights_proto_rawDescOnce sync.Once
	file_external_insights_proto_rawDescData = file_external_insights_proto_rawDesc
)

func file_external_insights_proto_rawDescGZIP() []byte {
	file_external_insights_proto_rawDescOnce.Do(func() {
		file_external_insights_proto_rawDescData = protoimpl.X.CompressGZIP(file_external_insights_proto_rawDescData)
	})
	return file_external_insights_proto_rawDescData
}

var file_external_insights_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_external_insights_proto_goTypes = []interface{}{
	(*DetailedInsights)(nil),                     // 0: external.DetailedInsights
	(*InsightsHistory)(nil),                      // 1: external.InsightsHistory
	(*Insights)(nil),                             // 2: external.Insights
	(*TraitInsightKey)(nil),                      // 3: external.TraitInsightKey
	(*TraitInsightValue)(nil),                    // 4: external.TraitInsightValue
	(*ListTraitInsightFactsReq)(nil),             // 5: external.ListTraitInsightFactsReq
	(*ListUniverseTraitInsightFactsReq)(nil),     // 6: external.ListUniverseTraitInsightFactsReq
	(*ListTraitInsightFactsRes)(nil),             // 7: external.ListTraitInsightFactsRes
	(*TraitInsightFactFilters)(nil),              // 8: external.TraitInsightFactFilters
	(*IdentifierCoverageInsights)(nil),           // 9: external.IdentifierCoverageInsights
	(*GetIdentifierCoverageInsightFactsReq)(nil), // 10: external.GetIdentifierCoverageInsightFactsReq
	(*GetIdentifierCoverageInsightFactsRes)(nil), // 11: external.GetIdentifierCoverageInsightFactsRes
	(*GetUniverseInsightFactsRes)(nil),           // 12: external.GetUniverseInsightFactsRes
	(*timestamppb.Timestamp)(nil),                // 13: google.protobuf.Timestamp
	(*SortField)(nil),                            // 14: external.SortField
}
var file_external_insights_proto_depIdxs = []int32{
	2,  // 0: external.DetailedInsights.identifiers:type_name -> external.Insights
	9,  // 1: external.DetailedInsights.coverage:type_name -> external.IdentifierCoverageInsights
	3,  // 2: external.DetailedInsights.traits:type_name -> external.TraitInsightKey
	2,  // 3: external.InsightsHistory.trend:type_name -> external.Insights
	13, // 4: external.Insights.computed_at:type_name -> google.protobuf.Timestamp
	4,  // 5: external.TraitInsightKey.values:type_name -> external.TraitInsightValue
	8,  // 6: external.ListTraitInsightFactsReq.filters:type_name -> external.TraitInsightFactFilters
	14, // 7: external.ListTraitInsightFactsReq.sorts:type_name -> external.SortField
	8,  // 8: external.ListUniverseTraitInsightFactsReq.filters:type_name -> external.TraitInsightFactFilters
	14, // 9: external.ListUniverseTraitInsightFactsReq.sorts:type_name -> external.SortField
	3,  // 10: external.ListTraitInsightFactsRes.data:type_name -> external.TraitInsightKey
	13, // 11: external.IdentifierCoverageInsights.computed_at:type_name -> google.protobuf.Timestamp
	9,  // 12: external.GetIdentifierCoverageInsightFactsRes.insights:type_name -> external.IdentifierCoverageInsights
	2,  // 13: external.GetUniverseInsightFactsRes.insights:type_name -> external.Insights
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_external_insights_proto_init() }
func file_external_insights_proto_init() {
	if File_external_insights_proto != nil {
		return
	}
	file_external_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_external_insights_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailedInsights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_insights_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsightsHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_insights_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Insights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_insights_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraitInsightKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_insights_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraitInsightValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_insights_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTraitInsightFactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_insights_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUniverseTraitInsightFactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_insights_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTraitInsightFactsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_insights_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraitInsightFactFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_insights_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierCoverageInsights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_insights_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdentifierCoverageInsightFactsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_insights_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIdentifierCoverageInsightFactsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_external_insights_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUniverseInsightFactsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_external_insights_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_external_insights_proto_goTypes,
		DependencyIndexes: file_external_insights_proto_depIdxs,
		MessageInfos:      file_external_insights_proto_msgTypes,
	}.Build()
	File_external_insights_proto = out.File
	file_external_insights_proto_rawDesc = nil
	file_external_insights_proto_goTypes = nil
	file_external_insights_proto_depIdxs = nil
}
