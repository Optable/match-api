// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: optable/cleanroom/v1/cleanroom.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The possible states of a cleanroom.
//
//buf:lint:ignore ENUM_VALUE_PREFIX
type Cleanroom_State int32

const (
	// Unspecified state.
	Cleanroom_STATE_UNSPECIFIED Cleanroom_State = 0
	// Cleanroom is being created.
	Cleanroom_CREATING Cleanroom_State = 1
	// Cleanroom is active.
	Cleanroom_ACTIVE Cleanroom_State = 2
	// Cleanroom is ending.
	Cleanroom_ENDING Cleanroom_State = 3
	// Cleanroom has ended.
	Cleanroom_ENDED Cleanroom_State = 4
	// Cleanroom has failed.
	Cleanroom_FAILED Cleanroom_State = 5
	// Cleanroom is archived.
	Cleanroom_ARCHIVED Cleanroom_State = 6
)

// Enum value maps for Cleanroom_State.
var (
	Cleanroom_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "ACTIVE",
		3: "ENDING",
		4: "ENDED",
		5: "FAILED",
		6: "ARCHIVED",
	}
	Cleanroom_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"ACTIVE":            2,
		"ENDING":            3,
		"ENDED":             4,
		"FAILED":            5,
		"ARCHIVED":          6,
	}
)

func (x Cleanroom_State) Enum() *Cleanroom_State {
	p := new(Cleanroom_State)
	*p = x
	return p
}

func (x Cleanroom_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cleanroom_State) Descriptor() protoreflect.EnumDescriptor {
	return file_optable_cleanroom_v1_cleanroom_proto_enumTypes[0].Descriptor()
}

func (Cleanroom_State) Type() protoreflect.EnumType {
	return &file_optable_cleanroom_v1_cleanroom_proto_enumTypes[0]
}

func (x Cleanroom_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cleanroom_State.Descriptor instead.
func (Cleanroom_State) EnumDescriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{0, 0}
}

// The possible types of a cleanroom.
//
//buf:lint:ignore ENUM_VALUE_PREFIX
type Cleanroom_Type int32

const (
	// Unspecified type.
	Cleanroom_TYPE_UNSPECIFIED Cleanroom_Type = 0
	// Clean room is a Publisher Advertiser Identifier Reconciliation (PAIR) clean room.
	Cleanroom_PAIR Cleanroom_Type = 1
)

// Enum value maps for Cleanroom_Type.
var (
	Cleanroom_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "PAIR",
	}
	Cleanroom_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"PAIR":             1,
	}
)

func (x Cleanroom_Type) Enum() *Cleanroom_Type {
	p := new(Cleanroom_Type)
	*p = x
	return p
}

func (x Cleanroom_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cleanroom_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_optable_cleanroom_v1_cleanroom_proto_enumTypes[1].Descriptor()
}

func (Cleanroom_Type) Type() protoreflect.EnumType {
	return &file_optable_cleanroom_v1_cleanroom_proto_enumTypes[1]
}

func (x Cleanroom_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cleanroom_Type.Descriptor instead.
func (Cleanroom_Type) EnumDescriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{0, 1}
}

//buf:lint:ignore ENUM_VALUE_PREFIX
type Cleanroom_Participant_State int32

const (
	// Unspecified state.
	Cleanroom_Participant_STATE_UNSPECIFIED Cleanroom_Participant_State = 0
	// Participant is invited to the cleanroom.
	Cleanroom_Participant_INVITED Cleanroom_Participant_State = 1
	// Participant is running the cleanroom operation.
	Cleanroom_Participant_RUNNING Cleanroom_Participant_State = 2
	// Participant's cleanroom operation has succeeded.
	Cleanroom_Participant_SUCCEEDED Cleanroom_Participant_State = 3
	// Participants cleanroom has failed, likely encountered an error.
	Cleanroom_Participant_FAILED Cleanroom_Participant_State = 4
	// Participant has rejected the cleanroom invitation.
	Cleanroom_Participant_REJECTED Cleanroom_Participant_State = 5
	// Participant has been revoked from the cleanroom.
	Cleanroom_Participant_REVOKED Cleanroom_Participant_State = 6
	// Participant is contributing data.
	Cleanroom_Participant_DATA_CONTRIBUTING Cleanroom_Participant_State = 7
	// Participant has contributed data.
	Cleanroom_Participant_DATA_CONTRIBUTED Cleanroom_Participant_State = 8
	// Participant is transforming the data for the PAIR cleanroom.
	Cleanroom_Participant_DATA_TRANSFORMING Cleanroom_Participant_State = 9
	// Participant has transformed the data for the PAIR cleanroom.
	Cleanroom_Participant_DATA_TRANSFORMED Cleanroom_Participant_State = 10
)

// Enum value maps for Cleanroom_Participant_State.
var (
	Cleanroom_Participant_State_name = map[int32]string{
		0:  "STATE_UNSPECIFIED",
		1:  "INVITED",
		2:  "RUNNING",
		3:  "SUCCEEDED",
		4:  "FAILED",
		5:  "REJECTED",
		6:  "REVOKED",
		7:  "DATA_CONTRIBUTING",
		8:  "DATA_CONTRIBUTED",
		9:  "DATA_TRANSFORMING",
		10: "DATA_TRANSFORMED",
	}
	Cleanroom_Participant_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"INVITED":           1,
		"RUNNING":           2,
		"SUCCEEDED":         3,
		"FAILED":            4,
		"REJECTED":          5,
		"REVOKED":           6,
		"DATA_CONTRIBUTING": 7,
		"DATA_CONTRIBUTED":  8,
		"DATA_TRANSFORMING": 9,
		"DATA_TRANSFORMED":  10,
	}
)

func (x Cleanroom_Participant_State) Enum() *Cleanroom_Participant_State {
	p := new(Cleanroom_Participant_State)
	*p = x
	return p
}

func (x Cleanroom_Participant_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cleanroom_Participant_State) Descriptor() protoreflect.EnumDescriptor {
	return file_optable_cleanroom_v1_cleanroom_proto_enumTypes[2].Descriptor()
}

func (Cleanroom_Participant_State) Type() protoreflect.EnumType {
	return &file_optable_cleanroom_v1_cleanroom_proto_enumTypes[2]
}

func (x Cleanroom_Participant_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cleanroom_Participant_State.Descriptor instead.
func (Cleanroom_Participant_State) EnumDescriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{0, 1, 0}
}

// A Cleanroom resource is represents a privacy preserving
// data clean room that allows secure data analysis on data contributed
// by multiple parties.
type Cleanroom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the clean room.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The display name of the clean room.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The description of the cleanroom.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Indicates when the cleanroom was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Indicates when the cleanroom was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Indicates when the cleanroom will expire.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// State of the cleanroom
	State Cleanroom_State `protobuf:"varint,7,opt,name=state,proto3,enum=optable.cleanroom.v1.Cleanroom_State" json:"state,omitempty"`
	// Type of the cleanroom.
	Type Cleanroom_Type `protobuf:"varint,8,opt,name=type,proto3,enum=optable.cleanroom.v1.Cleanroom_Type" json:"type,omitempty"`
	// Configuration of the clean room.
	Config *Cleanroom_Config `protobuf:"bytes,9,opt,name=config,proto3" json:"config,omitempty"`
	// Participants of the cleanroom.
	Participants *Cleanroom_Participant `protobuf:"bytes,10,opt,name=participants,proto3" json:"participants,omitempty"`
	// The result of the cleanroom.
	Result *Cleanroom_Result `protobuf:"bytes,11,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Cleanroom) Reset() {
	*x = Cleanroom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cleanroom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cleanroom) ProtoMessage() {}

func (x *Cleanroom) ProtoReflect() protoreflect.Message {
	mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cleanroom.ProtoReflect.Descriptor instead.
func (*Cleanroom) Descriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{0}
}

func (x *Cleanroom) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cleanroom) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Cleanroom) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cleanroom) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Cleanroom) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Cleanroom) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *Cleanroom) GetState() Cleanroom_State {
	if x != nil {
		return x.State
	}
	return Cleanroom_STATE_UNSPECIFIED
}

func (x *Cleanroom) GetType() Cleanroom_Type {
	if x != nil {
		return x.Type
	}
	return Cleanroom_TYPE_UNSPECIFIED
}

func (x *Cleanroom) GetConfig() *Cleanroom_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Cleanroom) GetParticipants() *Cleanroom_Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *Cleanroom) GetResult() *Cleanroom_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

// The request message to list cleanrooms.
type ListCleanroomsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of cleanrooms to return.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The page token to resume the list of cleanrooms.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The AIP compliant order_by to apply to list results according to AIP-132.
	OrderBy string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListCleanroomsRequest) Reset() {
	*x = ListCleanroomsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCleanroomsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCleanroomsRequest) ProtoMessage() {}

func (x *ListCleanroomsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCleanroomsRequest.ProtoReflect.Descriptor instead.
func (*ListCleanroomsRequest) Descriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{1}
}

func (x *ListCleanroomsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCleanroomsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCleanroomsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// The response message for ListCleanrooms.
type ListCleanroomsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of cleanrooms.
	Cleanrooms []*Cleanroom `protobuf:"bytes,1,rep,name=cleanrooms,proto3" json:"cleanrooms,omitempty"`
	// The pagination token to retrieve the next page of cleanrooms.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of cleanrooms matching the query.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListCleanroomsResponse) Reset() {
	*x = ListCleanroomsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCleanroomsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCleanroomsResponse) ProtoMessage() {}

func (x *ListCleanroomsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCleanroomsResponse.ProtoReflect.Descriptor instead.
func (*ListCleanroomsResponse) Descriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{2}
}

func (x *ListCleanroomsResponse) GetCleanrooms() []*Cleanroom {
	if x != nil {
		return x.Cleanrooms
	}
	return nil
}

func (x *ListCleanroomsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListCleanroomsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// The request message to get a cleanroom.
type GetCleanroomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the cleanroom to retrieve.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetCleanroomRequest) Reset() {
	*x = GetCleanroomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCleanroomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCleanroomRequest) ProtoMessage() {}

func (x *GetCleanroomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCleanroomRequest.ProtoReflect.Descriptor instead.
func (*GetCleanroomRequest) Descriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{3}
}

func (x *GetCleanroomRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The request message for ParticipateCleanroom.
type ParticipateCleanroomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the cleanroom to participate in.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ParticipateCleanroomRequest) Reset() {
	*x = ParticipateCleanroomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipateCleanroomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipateCleanroomRequest) ProtoMessage() {}

func (x *ParticipateCleanroomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipateCleanroomRequest.ProtoReflect.Descriptor instead.
func (*ParticipateCleanroomRequest) Descriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{4}
}

func (x *ParticipateCleanroomRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The request message for RejectCleanroomInvite.
type RejectCleanroomInviteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the cleanroom to reject the invitation for.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RejectCleanroomInviteRequest) Reset() {
	*x = RejectCleanroomInviteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectCleanroomInviteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectCleanroomInviteRequest) ProtoMessage() {}

func (x *RejectCleanroomInviteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectCleanroomInviteRequest.ProtoReflect.Descriptor instead.
func (*RejectCleanroomInviteRequest) Descriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{5}
}

func (x *RejectCleanroomInviteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The configuration of the clean room.
type Cleanroom_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*Cleanroom_Config_PairConfig_
	Config isCleanroom_Config_Config `protobuf_oneof:"config"`
}

func (x *Cleanroom_Config) Reset() {
	*x = Cleanroom_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cleanroom_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cleanroom_Config) ProtoMessage() {}

func (x *Cleanroom_Config) ProtoReflect() protoreflect.Message {
	mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cleanroom_Config.ProtoReflect.Descriptor instead.
func (*Cleanroom_Config) Descriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Cleanroom_Config) GetConfig() isCleanroom_Config_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *Cleanroom_Config) GetPairConfig() *Cleanroom_Config_PairConfig {
	if x, ok := x.GetConfig().(*Cleanroom_Config_PairConfig_); ok {
		return x.PairConfig
	}
	return nil
}

type isCleanroom_Config_Config interface {
	isCleanroom_Config_Config()
}

type Cleanroom_Config_PairConfig_ struct {
	// Configuration for a PAIR cleanroom.
	PairConfig *Cleanroom_Config_PairConfig `protobuf:"bytes,1,opt,name=pair_config,json=pairConfig,proto3,oneof"`
}

func (*Cleanroom_Config_PairConfig_) isCleanroom_Config_Config() {}

// Participant resource represents a participant of the cleanroom.
type Cleanroom_Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State of the participant.
	State Cleanroom_Participant_State `protobuf:"varint,1,opt,name=state,proto3,enum=optable.cleanroom.v1.Cleanroom_Participant_State" json:"state,omitempty"`
	// Update time of the participant.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Invitation update time for the participant.
	InvitationUpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=invitation_update_time,json=invitationUpdateTime,proto3" json:"invitation_update_time,omitempty"`
}

func (x *Cleanroom_Participant) Reset() {
	*x = Cleanroom_Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cleanroom_Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cleanroom_Participant) ProtoMessage() {}

func (x *Cleanroom_Participant) ProtoReflect() protoreflect.Message {
	mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cleanroom_Participant.ProtoReflect.Descriptor instead.
func (*Cleanroom_Participant) Descriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Cleanroom_Participant) GetState() Cleanroom_Participant_State {
	if x != nil {
		return x.State
	}
	return Cleanroom_Participant_STATE_UNSPECIFIED
}

func (x *Cleanroom_Participant) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Cleanroom_Participant) GetInvitationUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InvitationUpdateTime
	}
	return nil
}

// Result is the resource that represents the result of the cleanroom operation.
type Cleanroom_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*Cleanroom_Result_PairResult_
	Result isCleanroom_Result_Result `protobuf_oneof:"result"`
}

func (x *Cleanroom_Result) Reset() {
	*x = Cleanroom_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cleanroom_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cleanroom_Result) ProtoMessage() {}

func (x *Cleanroom_Result) ProtoReflect() protoreflect.Message {
	mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cleanroom_Result.ProtoReflect.Descriptor instead.
func (*Cleanroom_Result) Descriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{0, 2}
}

func (m *Cleanroom_Result) GetResult() isCleanroom_Result_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *Cleanroom_Result) GetPairResult() *Cleanroom_Result_PairResult {
	if x, ok := x.GetResult().(*Cleanroom_Result_PairResult_); ok {
		return x.PairResult
	}
	return nil
}

type isCleanroom_Result_Result interface {
	isCleanroom_Result_Result()
}

type Cleanroom_Result_PairResult_ struct {
	PairResult *Cleanroom_Result_PairResult `protobuf:"bytes,1,opt,name=pair_result,json=pairResult,proto3,oneof"`
}

func (*Cleanroom_Result_PairResult_) isCleanroom_Result_Result() {}

// Configuration for a PAIR cleanroom.
type Cleanroom_Config_PairConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The advertiser service account to access data in storage bucket.
	ServiceAccount string `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
}

func (x *Cleanroom_Config_PairConfig) Reset() {
	*x = Cleanroom_Config_PairConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cleanroom_Config_PairConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cleanroom_Config_PairConfig) ProtoMessage() {}

func (x *Cleanroom_Config_PairConfig) ProtoReflect() protoreflect.Message {
	mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cleanroom_Config_PairConfig.ProtoReflect.Descriptor instead.
func (*Cleanroom_Config_PairConfig) Descriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Cleanroom_Config_PairConfig) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

// Result of the PAIR cleanroom operation.
type Cleanroom_Result_PairResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates when the result was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Error of the result.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Unique identitfier of the advertiser and publisher pair.
	AdvertiserPublisherId string `protobuf:"bytes,3,opt,name=advertiser_publisher_id,json=advertiserPublisherId,proto3" json:"advertiser_publisher_id,omitempty"`
	// The fully qualified cloud storage URL where the double encrypted PAIR IDs from the publisher are stored.
	PublisherPairIdsUrl string `protobuf:"bytes,4,opt,name=publisher_pair_ids_url,json=publisherPairIdsUrl,proto3" json:"publisher_pair_ids_url,omitempty"`
	// The fully qualified cloud storage URL where the double encrypted PAIR IDs from the advertiser are stored.
	AdvertiserPairIdsUrl string `protobuf:"bytes,5,opt,name=advertiser_pair_ids_url,json=advertiserPairIdsUrl,proto3" json:"advertiser_pair_ids_url,omitempty"`
	// The fully qualified cloud storage URL where the once decrypted matched PAIR IDs are stored. This is optional.
	MatchedPairIdsUrl string `protobuf:"bytes,6,opt,name=matched_pair_ids_url,json=matchedPairIdsUrl,proto3" json:"matched_pair_ids_url,omitempty"`
}

func (x *Cleanroom_Result_PairResult) Reset() {
	*x = Cleanroom_Result_PairResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cleanroom_Result_PairResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cleanroom_Result_PairResult) ProtoMessage() {}

func (x *Cleanroom_Result_PairResult) ProtoReflect() protoreflect.Message {
	mi := &file_optable_cleanroom_v1_cleanroom_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cleanroom_Result_PairResult.ProtoReflect.Descriptor instead.
func (*Cleanroom_Result_PairResult) Descriptor() ([]byte, []int) {
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Cleanroom_Result_PairResult) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Cleanroom_Result_PairResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Cleanroom_Result_PairResult) GetAdvertiserPublisherId() string {
	if x != nil {
		return x.AdvertiserPublisherId
	}
	return ""
}

func (x *Cleanroom_Result_PairResult) GetPublisherPairIdsUrl() string {
	if x != nil {
		return x.PublisherPairIdsUrl
	}
	return ""
}

func (x *Cleanroom_Result_PairResult) GetAdvertiserPairIdsUrl() string {
	if x != nil {
		return x.AdvertiserPairIdsUrl
	}
	return ""
}

func (x *Cleanroom_Result_PairResult) GetMatchedPairIdsUrl() string {
	if x != nil {
		return x.MatchedPairIdsUrl
	}
	return ""
}

var File_optable_cleanroom_v1_cleanroom_proto protoreflect.FileDescriptor

var file_optable_cleanroom_v1_cleanroom_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6f, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72,
	0x6f, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6f, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x0f, 0x0a, 0x09, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x6f, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72,
	0x6f, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x6f, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x65, 0x61, 0x6e,
	0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f,
	0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x65, 0x61,
	0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f,
	0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f,
	0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0xa4, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x0b,
	0x70, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x65, 0x61,
	0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x3a, 0x0a, 0x0a, 0x50, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xbf, 0x03, 0x0a, 0x0b, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xc8, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x15, 0x0a, 0x11, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x15, 0x0a,
	0x11, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x49,
	0x4e, 0x47, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x0a, 0x1a, 0xbd, 0x03, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x70, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xd2, 0x02, 0x0a, 0x0a,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x17, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x16, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x49, 0x64, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x3a,
	0x0a, 0x17, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x14, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x49, 0x64, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x34, 0x0a, 0x14, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x50, 0x61, 0x69, 0x72, 0x49, 0x64, 0x73, 0x55, 0x72, 0x6c,
	0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x69, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x06, 0x22, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x52, 0x10, 0x01, 0x3a, 0x3a, 0xea,
	0x41, 0x37, 0x0a, 0x1d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x6f, 0x70,
	0x74, 0x62, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f,
	0x6d, 0x12, 0x16, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x2f, 0x7b, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x7d, 0x22, 0x73, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xa0,
	0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6f, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x0a,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x50, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d,
	0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x62, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x25, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72,
	0x6f, 0x6f, 0x6d, 0x2e, 0x6f, 0x70, 0x74, 0x62, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a,
	0x1c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x6f,
	0x70, 0x74, 0x62, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f,
	0x6f, 0x6d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0xd3, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d,
	0x2e, 0x6f, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f,
	0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x70, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x4f, 0x43, 0x58, 0xaa, 0x02, 0x14, 0x4f, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x14, 0x4f, 0x70,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x20, 0x4f, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x4f, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x3a,
	0x3a, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x72, 0x6f, 0x6f, 0x6d, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_optable_cleanroom_v1_cleanroom_proto_rawDescOnce sync.Once
	file_optable_cleanroom_v1_cleanroom_proto_rawDescData = file_optable_cleanroom_v1_cleanroom_proto_rawDesc
)

func file_optable_cleanroom_v1_cleanroom_proto_rawDescGZIP() []byte {
	file_optable_cleanroom_v1_cleanroom_proto_rawDescOnce.Do(func() {
		file_optable_cleanroom_v1_cleanroom_proto_rawDescData = protoimpl.X.CompressGZIP(file_optable_cleanroom_v1_cleanroom_proto_rawDescData)
	})
	return file_optable_cleanroom_v1_cleanroom_proto_rawDescData
}

var file_optable_cleanroom_v1_cleanroom_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_optable_cleanroom_v1_cleanroom_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_optable_cleanroom_v1_cleanroom_proto_goTypes = []any{
	(Cleanroom_State)(0),                 // 0: optable.cleanroom.v1.Cleanroom.State
	(Cleanroom_Type)(0),                  // 1: optable.cleanroom.v1.Cleanroom.Type
	(Cleanroom_Participant_State)(0),     // 2: optable.cleanroom.v1.Cleanroom.Participant.State
	(*Cleanroom)(nil),                    // 3: optable.cleanroom.v1.Cleanroom
	(*ListCleanroomsRequest)(nil),        // 4: optable.cleanroom.v1.ListCleanroomsRequest
	(*ListCleanroomsResponse)(nil),       // 5: optable.cleanroom.v1.ListCleanroomsResponse
	(*GetCleanroomRequest)(nil),          // 6: optable.cleanroom.v1.GetCleanroomRequest
	(*ParticipateCleanroomRequest)(nil),  // 7: optable.cleanroom.v1.ParticipateCleanroomRequest
	(*RejectCleanroomInviteRequest)(nil), // 8: optable.cleanroom.v1.RejectCleanroomInviteRequest
	(*Cleanroom_Config)(nil),             // 9: optable.cleanroom.v1.Cleanroom.Config
	(*Cleanroom_Participant)(nil),        // 10: optable.cleanroom.v1.Cleanroom.Participant
	(*Cleanroom_Result)(nil),             // 11: optable.cleanroom.v1.Cleanroom.Result
	(*Cleanroom_Config_PairConfig)(nil),  // 12: optable.cleanroom.v1.Cleanroom.Config.PairConfig
	(*Cleanroom_Result_PairResult)(nil),  // 13: optable.cleanroom.v1.Cleanroom.Result.PairResult
	(*timestamppb.Timestamp)(nil),        // 14: google.protobuf.Timestamp
}
var file_optable_cleanroom_v1_cleanroom_proto_depIdxs = []int32{
	14, // 0: optable.cleanroom.v1.Cleanroom.create_time:type_name -> google.protobuf.Timestamp
	14, // 1: optable.cleanroom.v1.Cleanroom.update_time:type_name -> google.protobuf.Timestamp
	14, // 2: optable.cleanroom.v1.Cleanroom.expire_time:type_name -> google.protobuf.Timestamp
	0,  // 3: optable.cleanroom.v1.Cleanroom.state:type_name -> optable.cleanroom.v1.Cleanroom.State
	1,  // 4: optable.cleanroom.v1.Cleanroom.type:type_name -> optable.cleanroom.v1.Cleanroom.Type
	9,  // 5: optable.cleanroom.v1.Cleanroom.config:type_name -> optable.cleanroom.v1.Cleanroom.Config
	10, // 6: optable.cleanroom.v1.Cleanroom.participants:type_name -> optable.cleanroom.v1.Cleanroom.Participant
	11, // 7: optable.cleanroom.v1.Cleanroom.result:type_name -> optable.cleanroom.v1.Cleanroom.Result
	3,  // 8: optable.cleanroom.v1.ListCleanroomsResponse.cleanrooms:type_name -> optable.cleanroom.v1.Cleanroom
	12, // 9: optable.cleanroom.v1.Cleanroom.Config.pair_config:type_name -> optable.cleanroom.v1.Cleanroom.Config.PairConfig
	2,  // 10: optable.cleanroom.v1.Cleanroom.Participant.state:type_name -> optable.cleanroom.v1.Cleanroom.Participant.State
	14, // 11: optable.cleanroom.v1.Cleanroom.Participant.update_time:type_name -> google.protobuf.Timestamp
	14, // 12: optable.cleanroom.v1.Cleanroom.Participant.invitation_update_time:type_name -> google.protobuf.Timestamp
	13, // 13: optable.cleanroom.v1.Cleanroom.Result.pair_result:type_name -> optable.cleanroom.v1.Cleanroom.Result.PairResult
	14, // 14: optable.cleanroom.v1.Cleanroom.Result.PairResult.create_time:type_name -> google.protobuf.Timestamp
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_optable_cleanroom_v1_cleanroom_proto_init() }
func file_optable_cleanroom_v1_cleanroom_proto_init() {
	if File_optable_cleanroom_v1_cleanroom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_optable_cleanroom_v1_cleanroom_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Cleanroom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optable_cleanroom_v1_cleanroom_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListCleanroomsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optable_cleanroom_v1_cleanroom_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListCleanroomsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optable_cleanroom_v1_cleanroom_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetCleanroomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optable_cleanroom_v1_cleanroom_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ParticipateCleanroomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optable_cleanroom_v1_cleanroom_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RejectCleanroomInviteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optable_cleanroom_v1_cleanroom_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Cleanroom_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optable_cleanroom_v1_cleanroom_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Cleanroom_Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optable_cleanroom_v1_cleanroom_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Cleanroom_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optable_cleanroom_v1_cleanroom_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Cleanroom_Config_PairConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_optable_cleanroom_v1_cleanroom_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Cleanroom_Result_PairResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_optable_cleanroom_v1_cleanroom_proto_msgTypes[6].OneofWrappers = []any{
		(*Cleanroom_Config_PairConfig_)(nil),
	}
	file_optable_cleanroom_v1_cleanroom_proto_msgTypes[8].OneofWrappers = []any{
		(*Cleanroom_Result_PairResult_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_optable_cleanroom_v1_cleanroom_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_optable_cleanroom_v1_cleanroom_proto_goTypes,
		DependencyIndexes: file_optable_cleanroom_v1_cleanroom_proto_depIdxs,
		EnumInfos:         file_optable_cleanroom_v1_cleanroom_proto_enumTypes,
		MessageInfos:      file_optable_cleanroom_v1_cleanroom_proto_msgTypes,
	}.Build()
	File_optable_cleanroom_v1_cleanroom_proto = out.File
	file_optable_cleanroom_v1_cleanroom_proto_rawDesc = nil
	file_optable_cleanroom_v1_cleanroom_proto_goTypes = nil
	file_optable_cleanroom_v1_cleanroom_proto_depIdxs = nil
}
